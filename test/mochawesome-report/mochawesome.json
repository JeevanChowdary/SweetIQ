{
  "stats": {
    "suites": 6,
    "tests": 22,
    "passes": 21,
    "pending": 1,
    "failures": 0,
    "start": "2018-04-16T14:17:13.370Z",
    "end": "2018-04-16T14:17:13.448Z",
    "duration": 78,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 4.5,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d7bd9c5b-5d73-427b-a5fc-bcf180a03f48",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "2a2f3e6a-5c3e-4661-8b91-8afac14e977b",
        "title": "valid operator, values, output Operations",
        "fullFile": "C:\\Users\\JeevanPrakash\\Desktop\\example\\test\\arithmetic_test.js",
        "file": "\\arithmetic_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "my_calculator('+',4, 6); returns 10",
            "fullTitle": "valid operator, values, output Operations my_calculator('+',4, 6); returns 10",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('+',4, 6), 10);\n// Invoke done when the test is complete.\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "f0f497e1-c3cb-42af-b602-cbd25761b346",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('-', 37, 16); returns 21",
            "fullTitle": "valid operator, values, output Operations my_calculator('-', 37, 16); returns 21",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.deepEqual(arithmetic.my_calculator('-',37, 16), 21);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "85372d57-fea8-4d8b-b45d-a0e2425a8236",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('*',5, 12); returns 60",
            "fullTitle": "valid operator, values, output Operations my_calculator('*',5, 12); returns 60",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.deepStrictEqual(arithmetic.my_calculator('*',5, 12), 60);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "aa68b4e0-65dd-43c2-8f98-5001a9944d54",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('/',1470, 7); returns 210",
            "fullTitle": "valid operator, values, output Operations my_calculator('/',1470, 7); returns 210",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('/',1470, 7), 210);\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "27229b84-e2ff-4a37-a575-1bbab319386d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f0f497e1-c3cb-42af-b602-cbd25761b346",
          "85372d57-fea8-4d8b-b45d-a0e2425a8236",
          "aa68b4e0-65dd-43c2-8f98-5001a9944d54",
          "27229b84-e2ff-4a37-a575-1bbab319386d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8a1450c4-9b6f-4dd9-9747-6348f349451d",
        "title": "Invalid Division Calculator Operations",
        "fullFile": "C:\\Users\\JeevanPrakash\\Desktop\\example\\test\\arithmetic_test.js",
        "file": "\\arithmetic_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "my_calculator('/',100, 0); returns 'Number two cannot be 0'",
            "fullTitle": "Invalid Division Calculator Operations my_calculator('/',100, 0); returns 'Number two cannot be 0'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('/',100, 0), 'Cannot divide by 0');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "e716378d-d1c9-47dd-9db1-5303426ced46",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e716378d-d1c9-47dd-9db1-5303426ced46"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "86b1c932-692a-4e6f-b553-0c8f895e39ae",
        "title": "Invalid operator type with valid values",
        "fullFile": "C:\\Users\\JeevanPrakash\\Desktop\\example\\test\\arithmetic_test.js",
        "file": "\\arithmetic_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "my_calculator('%',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('%',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "d5c220f6-7d9c-459d-a211-9fd49961a729",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('++',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('++',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "8165efec-8676-422a-b503-3061a9d65c64",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('--',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('--',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "ad3bfc67-02cc-4600-ac22-c3e31ff08556",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('**',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('**',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "639abbfc-bf32-4ce5-85a6-6eb405a25bff",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('//',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('//',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "1188de67-017b-405c-beda-4134b86c695a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('+-',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('+-',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "1f11fd43-5e83-4f7f-be13-72ec588d621a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('-+',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('-+',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "5f71905d-d7e3-43ed-9f9e-da3be1936d70",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('+*',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('+*',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "dc3cf25b-e928-4c6b-a829-48129b047313",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('*+',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('*+',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "517c8b68-415d-43ff-b236-0f40bbc5f610",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('+%',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('+%',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "d371ccaa-32c3-454b-8a7e-5e753aea0a06",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('%+',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "fullTitle": "Invalid operator type with valid values my_calculator('%+',9, 1); returns 'my_calculator will support only +, -, /, *  operators only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('%',9, 1), 'Wrong Operator Type');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "d112df90-f86a-48cf-aae5-445657033567",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d5c220f6-7d9c-459d-a211-9fd49961a729",
          "8165efec-8676-422a-b503-3061a9d65c64",
          "ad3bfc67-02cc-4600-ac22-c3e31ff08556",
          "639abbfc-bf32-4ce5-85a6-6eb405a25bff",
          "1188de67-017b-405c-beda-4134b86c695a",
          "1f11fd43-5e83-4f7f-be13-72ec588d621a",
          "5f71905d-d7e3-43ed-9f9e-da3be1936d70",
          "dc3cf25b-e928-4c6b-a829-48129b047313",
          "517c8b68-415d-43ff-b236-0f40bbc5f610",
          "d371ccaa-32c3-454b-8a7e-5e753aea0a06",
          "d112df90-f86a-48cf-aae5-445657033567"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0f638a0e-1188-492d-b304-5e924cade2fd",
        "title": "valid operator type with invalid values",
        "fullFile": "C:\\Users\\JeevanPrakash\\Desktop\\example\\test\\arithmetic_test.js",
        "file": "\\arithmetic_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "my_calculator('/','5', '1as1'); returns 'must pass integer, integer values only'",
            "fullTitle": "valid operator type with invalid values my_calculator('/','5', '1as1'); returns 'must pass integer, integer values only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('/','5', '1as1'), 'Must pass numbers as params');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "84fa5989-718c-4d36-a7a2-fb8b94c1a3ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('/','220S', '5'); returns 'must pass integer, integer values only'",
            "fullTitle": "valid operator type with invalid values my_calculator('/','220S', '5'); returns 'must pass integer, integer values only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('/','220s', '5'), 'Must pass numbers as params');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "735a85a0-82e6-446a-a997-f8cc1ac57b3c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "my_calculator('/','220S', '1as1'); returns 'must pass integer, integer values only'",
            "fullTitle": "valid operator type with invalid values my_calculator('/','220S', '1as1'); returns 'must pass integer, integer values only'",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(arithmetic.my_calculator('/','220s', '1as1'), 'Must pass numbers as params');\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "45eb0e9b-c975-43ec-9d6b-e58eb2a174f6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "84fa5989-718c-4d36-a7a2-fb8b94c1a3ee",
          "735a85a0-82e6-446a-a997-f8cc1ac57b3c",
          "45eb0e9b-c975-43ec-9d6b-e58eb2a174f6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "992744bb-0af4-41dd-b34d-5c5e7a811cb2",
        "title": "Failing test cases by comparing to type with invalid values",
        "fullFile": "C:\\Users\\JeevanPrakash\\Desktop\\example\\test\\arithmetic_test.js",
        "file": "\\arithmetic_test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "my_calculator('/',220, 11); will not return 210",
            "fullTitle": "Failing test cases by comparing to type with invalid values my_calculator('/',220, 11); will not return 210",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "ab8ee187-66eb-4d78-a986-d875eb5acc01",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [
          "ab8ee187-66eb-4d78-a986-d875eb5acc01"
        ],
        "skipped": [],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b530d015-8c19-42a3-bfbd-c9f823bb7fb9",
        "title": "Basic mocha test",
        "fullFile": "C:\\Users\\JeevanPrakash\\Desktop\\example\\test\\starting.spec.js",
        "file": "\\starting.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should deal with objects",
            "fullTitle": "Basic mocha test should deal with objects",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var obj1= {name: 'jon', gender:'male'};\nvar obj2= {name: 'jon', gender:'male'};\nobj1.should.have.property('name').equal('jon');\nobj1.should.deep.equal(obj2);",
            "err": {},
            "isRoot": false,
            "uuid": "07e4e82e-9f7d-49f1-9ae2-352bd454d542",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should allow testing nulls",
            "fullTitle": "Basic mocha test should allow testing nulls",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var iAmNull = null;\n\nshould.not.exist(iAmNull);",
            "err": {},
            "isRoot": false,
            "uuid": "3f9c2880-eafb-4a15-85aa-28977d097121",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "07e4e82e-9f7d-49f1-9ae2-352bd454d542",
          "3f9c2880-eafb-4a15-85aa-28977d097121"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}